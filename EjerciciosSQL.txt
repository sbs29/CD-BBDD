EJEERCICIO DE BASES DE DATOS DBEAVER

DIFICULTAD MUY FACIL

	--------------------------------------------------------------------------------------
 1. Devuelve todas las peliculas

	SELECT * FROM PUBLIC.MOVIES 
	
	--------------------------------------------------------------------------------------
 2. Duvuelve todos los generos existentes

	SELECT * FROM PUBLIC.GENRES
	
	--------------------------------------------------------------------------------------
 3. Devuelve la lista de todos los estudios de grabación que esten activos

	SELECT * FROM PUBLIC.STUDIOS WHERE STUDIO_ACTIVE = 1
	SELECT * FROM PUBLIC.STUDIOS WHERE STUDIO_ACTIVE <> 0
	SELECT * FROM PUBLIC.STUDIOS WHERE STUDIO_ACTIVE IS TRUE
	--------------------------------------------------------------------------------------
 4. Devuleve una lista de los 20 ultimos miembros en anotarse al videoclub

	SELECT * FROM PUBLIC.MEMBERS ORDER BY MEMBER_DISCHARGE_DATE DESC LIMIT 20
	
	
	
	
DIFICULTAD FACIL
	--------------------------------------------------------------------------------------
 5. Devuelve las 20 duraciones de peliculas mas frecuentes, ordenados de mayor a menor

	SELECT MOVIE_DURATION, COUNT(*) AS FRECUENCIA FROM MOVIES GROUP BY MOVIE_DURATION ORDER BY FRECUENCIA DESC LIMIT 20

	--------------------------------------------------------------------------------------
 6. Devuelve las peliculas del año 2000 en adelante que empiecen por la letra A

	ELECT * FROM PUBLIC.MOVIES WHERE MOVIE_NAME LIKE 'A%' AND MOVIE_LAUNCH_DATE >= '2000-01-01'
	SELECT * FROM PUBLIC.MOVIES WHERE YEAR (MOVIE_LAUNCH_DATE) >= 2000 AND UPPER(MOVIE_NAME) LIKE 'A%' ORDER BY MOVIE_LAUNCH_DATE

	--------------------------------------------------------------------------------------
 7. Devuelve los actores nacidos un mes de Junio

	SELECT * FROM PUBLIC.ACTORS WHERE ACTOR_BIRTH_DATE LIKE '%-06-%'
	SELECT * FROM PUBLIC.ACTORS WHERE MONTH (ACTOR_BIRTH_DATE) = 06 ORDER BY DAY (ACTOR_BIRTH_DATE)

	--------------------------------------------------------------------------------------
 8. Devuelve los actores nacidos cualquier mes que no sea Junio y que sigan vivos

	SELECT * FROM PUBLIC.ACTORS WHERE MONTH (ACTOR_BIRTH_DATE) <> 06 AND ACTOR_DEAD_DATE IS NULL

	--------------------------------------------------------------------------------------
 9. Devuelve el nombre y la edad de todos los directores menores o iguales de 50 años que esten vivos

	SELECT DIRECTOR_NAME, DATEDIFF(YEAR,DIRECTOR_BIRTH_DATE,TODAY()) AS "AGE"
	FROM DIRECTORS
	WHERE YEAR(NOW()) - YEAR(DIRECTOR_BIRTH_DATE) <= 50
	AND DIRECTOR_DEAD_DATE IS NULL

	--------------------------------------------------------------------------------------
 10. Devuelve el nombre y la edad de todos los directores menores de 50 años que hayan fallecido

	SELECT ACTOR_NAME,
	--DATEDIFF NO PERMITE CALCULAR LA DIFERENCIA ENTRE DOS FECHAS
	DATEDIFF('YEAR', ACTOR_BIRTH_DATE, ACTOR_DEAD_DATE) AS ACTOR_AGE	
	FROM ACTORS
	WHERE DATEDIFF('YEAR', ACTOR_BIRTH_DATE, ACTOR_DEAD_DATE) < 50
	AND ACTOR_DEAD_DATE IS NOT NULL;

	--------------------------------------------------------------------------------------
 11. Devuelve el nombre de todos los directores menores o iguales de 40 años que esten vivos

	SELECT DIRECTOR_NAME
	FROM DIRECTORS
	WHERE YEAR(NOW()) - YEAR(DIRECTOR_BIRTH_DATE) <= 40
	AND DIRECTOR_DEAD_DATE IS NULL

	--------------------------------------------------------------------------------------
 12. Indica la edad media de los directores vivos

	SELECT AVG(DATEDIFF(YEAR,DIRECTOR_BIRTH_DATE, CURRENT_DATE)) AS AVERAGE_AGE FROM DIRECTORS WHERE DIRECTOR_DEAD_DATE IS NULL

	--------------------------------------------------------------------------------------
 13. Indica la edad media de los actores fallecidos

	SELECT AVG(DATEDIFF(YEAR,DIRECTOR_BIRTH_DATE, CURRENT_DATE)) AS AVERAGE_AGE FROM DIRECTORS WHERE DIRECTOR_DEAD_DATE IS NOT NULL
	
	
	
DIFICULTAD: Media
	
	--------------------------------------------------------------------------------------
 14. Devuelve el nombre de todas las películas y el nombre del estudio que las ha realizado
 
	SELECT m.MOVIE_NAME, s.STUDIO_NAME 
	FROM PUBLIC.MOVIES m 
	INNER JOIN PUBLIC.STUDIOS s ON m.STUDIO_ID = s.STUDIO_ID 
 
	--------------------------------------------------------------------------------------
 15. Devuelve los miembros que alquilaron al menos una película entre el año 2010 y el 2015
 
	SELECT DISTINCT MEMBER_NAME 
	FROM PUBLIC.MEMBERS m
	INNER JOIN PUBLIC.MEMBERS_MOVIE_RENTAL r
	ON m.MEMBER_ID = r.MEMBER_ID 
	WHERE r.MEMBER_RENTAL_DATE > '2010-01-01' AND r.MEMBER_RETURN_DATE < '2015-12-31'
	--WHERE YEAR(MEMBER_RENTAL_DATE) > 2010 AND YEAR(MEMBER_RENTAL_DATE) < 2015
 
	--------------------------------------------------------------------------------------
 16. Devuelve cuantas películas hay de cada país
 
	SELECT
		n.NATIONALITY_NAME AS COUNTRY,
		COUNT(m.MOVIE_ID) AS MOVIES
	FROM
		NATIONALITIES n
	INNER JOIN MOVIES m ON
		n.NATIONALITY_ID = m.NATIONALITY_ID
	GROUP BY
		n.NATIONALITY_NAME
	ORDER BY 
		COUNT(m.MOVIE_ID) 
	DESC;
	
	--------------------------------------------------------------------------------------
 17. Devuelve todas las películas que hay de género documental
 
	SELECT 
		*
	FROM
		GENRES g
	INNER JOIN MOVIES m ON
		g.GENRE_ID  = m.GENRE_ID
	WHERE g.GENRE_NAME = 'Documentary'
	--------------------------------------------------------------------------------------
	SELECT 
		*
	FROM
		MOVIES
	WHERE GENRE_ID = (SELECT GENRE_ID FROM GENRES WHERE GENRE_NAME = 'Documentary')
	
	--------------------------------------------------------------------------------------
 18. Devuelve todas las películas creadas por directores nacidos a partir de 1980 y que todavía están vivos
 
	SELECT
		m.MOVIE_NAME AS MOVIE_NAME
	FROM
		MOVIES m
	INNER JOIN DIRECTORS d ON
		m.DIRECTOR_ID = d.DIRECTOR_ID 
	WHERE YEAR(d.DIRECTOR_BIRTH_DATE) > 1980 AND d.DIRECTOR_DEAD_DATE IS NULL

	--------------------------------------------------------------------------------------
 19. Indica si hay alguna coincidencia de nacimiento de ciudad (y si las hay, indicarlas) entre los miembros del videoclub y los directores.

	SELECT
		m.MEMBER_NAME,
		d.DIRECTOR_NAME,
		d.DIRECTOR_BIRTH_PLACE
	FROM
		MEMBERS m
	INNER JOIN DIRECTORS d ON
		m.MEMBER_TOWN = d.DIRECTOR_BIRTH_PLACE
	
	--------------------------------------------------------------------------------------
 20. Devuelve el nombre y el año de todas las películas que han sido producidas por un estudio que actualmente no esté activo
 
	SELECT 
		m.MOVIE_NAME, m.MOVIE_LAUNCH_DATE 
	FROM
		PUBLIC.MOVIES m
	INNER JOIN PUBLIC.STUDIOS s ON
		m.STUDIO_ID = s.STUDIO_ID 
	WHERE s.STUDIO_ACTIVE = 0

	--------------------------------------------------------------------------------------
 21. Devuelve una lista de las últimas 10 películas que se han alquilado
 
	SELECT
		m.MOVIE_NAME,
		r.MEMBER_RENTAL_DATE
	FROM
		PUBLIC.MOVIES m
	INNER JOIN PUBLIC.MEMBERS_MOVIE_RENTAL r ON
		r.MOVIE_ID = m.MOVIE_ID
	ORDER BY
		r.MEMBER_RENTAL_DATE DESC
	LIMIT 10

	--------------------------------------------------------------------------------------
 22. Indica cuántas películas ha realizado cada director antes de cumplir 41 años
 
	SELECT
		COUNT(MOVIE_ID) AS MOVIE_COUNT
		d.DIRECTOR_NAME
	FROM
		PUBLIC.MOVIES m
	INNER JOIN PUBLIC.DIRECTORS d
	ON
		m.DIRECTOR_ID = d.DIRECTOR_ID
	WHERE DATEDIFF(YEAR, d.DIRECTOR_BIRTH_DATE, m.MOVIE_LAUNCH_DATE) <41
	GROUP BY d.DIRECTOR_NAME
	
	--------------------------------------------------------------------------------------
 23. Indica cuál es la media de duración de las películas de cada director

	SELECT d.DIRECTOR_NAME, AVG(m.MOVIE_DURATION) AS AVERAGE_MOVIE_DURATION
	FROM MOVIES m
	INNER JOIN DIRECTORS d ON m.DIRECTOR_ID = d.DIRECTOR_ID
	GROUP BY d.DIRECTOR_NAME

	--------------------------------------------------------------------------------------
 24. Indica cuál es el nombre y la duración mínima de las películas que han sido alquiladas en los últimos 2 años por los miembros del videoclub (La "fecha de ejecución" en este script es el 25-01-2019)

	SELECT MOVIES.MOVIE_NAME, MOVIES.MOVIE_DURATION
	FROM MOVIES
	JOIN MEMBERS_MOVIE_RENTAL ON MOVIES.MOVIE_ID = MEMBERS_MOVIE_RENTAL.MOVIE_ID
	JOIN MEMBERS ON MEMBERS_MOVIE_RENTAL.MEMBER_ID = MEMBERS.MOVIE_ID
	WHERE DATEADD('YEAR',-2,DATE'2019-01-25') <  MEMBERS_MOVIE_RENTAL.MEMBER_RENTAL_DATE
	ORDER BY MOVIES.MOVIE_DURATION LIMIT 1;
	
	--------------------------------------------------------------------------------------
 25. Indica el número de películas que hayan hecho los directores durante las décadas de los 60, 70 y 80 que contengan la palabra "The" en cualquier parte del título
 
	SELECT d.DIRECTOR_NAME, COUNT(*) AS N_MOVIES 
	FROM DIRECTORS d 
	JOIN MOVIES m ON d.DIRECTOR_ID = m.DIRECTOR_ID 
	WHERE UPPER(m.MOVIE_NAME) LIKE '%THE%' 
	AND MOVIE_LAUNCH_DATE >= DATE '1960-01-01' AND MOVIE_LAUNCH_DATE <= DATE '1989-12-31'
	GROUP BY d.DIRECTOR_NAME
 
DIFICULTAD: Difícil

	--------------------------------------------------------------------------------------
 26. Lista nombre, nacionalidad y director de todas las películas
 
	SELECT
		m.MOVIE_NAME,
		n.NATIONALITY_NAME,
		d.DIRECTOR_NAME
	FROM
		PUBLIC.MOVIES m
	INNER JOIN PUBLIC.NATIONALITIES n 
	ON
		m.NATIONALITY_ID = n.NATIONALITY_ID
	INNER JOIN PUBLIC.DIRECTORS d
	ON
		m.DIRECTOR_ID = d.DIRECTOR_ID
 
	--------------------------------------------------------------------------------------
 27. Muestra las películas con los actores que han participado en cada una de ellas
 
	SELECT
		a.ACTOR_NAME,
		m.MOVIE_NAME
	FROM
		PUBLIC.MOVIES m
	JOIN PUBLIC.MOVIES_ACTORS n 
	ON
		n.MOVIE_ID = m.MOVIE_ID
	JOIN PUBLIC.ACTORS a
	ON
		a.ACTOR_ID = n.ACTOR_ID
 
	--------------------------------------------------------------------------------------
 28. Indica cual es el nombre del director del que más películas se han alquilado
 
	SELECT
		D.DIRECTOR_NAME,
		COUNT(MMR.MEMBER_MOVIE_RENTAL_ID) AS "RENTED_MOVIES"
	FROM
		DIRECTORS D
	JOIN PUBLIC.MOVIES M ON
		D.DIRECTOR_ID = M.DIRECTOR_ID
	JOIN PUBLIC.MEMBERS_MOVIE_RENTAL MMR ON
		M.MOVIE_ID = MMR.MOVIE_ID
	GROUP BY
		D.DIRECTOR_NAME
	ORDER BY RENTED_MOVIES DESC LIMIT 1
 
	--------------------------------------------------------------------------------------
 29. Indica cuantos premios han ganado cada uno de los estudios con las películas que han creado
 
	SELECT
		SUM(A.AWARD_WIN) AS AWARDS_WIN,
		S.STUDIO_NAME
	FROM
		MOVIES M
	INNER JOIN STUDIOS S ON
		M.STUDIO_ID = S.STUDIO_ID
	INNER JOIN AWARDS A ON
		A.MOVIE_ID = M.MOVIE_ID
	GROUP BY
		S.STUDIO_NAME  
 
	--------------------------------------------------------------------------------------
 30. Indica el número de premios a los que estuvo nominado un actor, pero que no ha conseguido (Si una película está nominada a un premio, su actor también lo está)
	
	SELECT
		AC.ACTOR_NAME,
		SUM(A.AWARD_ALMOST_WIN) AS AWARD_NOMINATION
	FROM
		PUBLIC.MOVIES M
	INNER JOIN PUBLIC.AWARDS A ON
		A.MOVIE_ID = M.MOVIE_ID
	INNER JOIN PUBLIC.MOVIES_ACTORS MA ON
		MA.MOVIE_ID = M.MOVIE_ID
	INNER JOIN PUBLIC.ACTORS AC ON
		AC.ACTOR_ID = MA.ACTOR_ID
	GROUP BY
		AC.ACTOR_NAME
	
	--------------------------------------------------------------------------------------
 31. Indica cuantos actores y directores hicieron películas para los estudios no activos
 
	SELECT
		S.STUDIO_NAME,
		COUNT(DISTINCT M.DIRECTOR_ID) AS "DIRECTORS_NUMBER",
		COUNT(DISTINCT MA.ACTOR_ID) AS "ACTORS_NUMBER" 
	FROM
		PUBLIC.STUDIOS S
	INNER JOIN PUBLIC.MOVIES M ON
		S.STUDIO_ID = M.STUDIO_ID 
	INNER JOIN PUBLIC.MOVIES_ACTORS MA ON
		M.MOVIE_ID = MA.MOVIE_ID 
	INNER JOIN PUBLIC.DIRECTORS D ON
		M.DIRECTOR_ID = D.DIRECTOR_ID 
	WHERE
		S.STUDIO_ACTIVE = FALSE 
	GROUP BY
		S.STUDIO_NAME
 
	--------------------------------------------------------------------------------------
 32. Indica el nombre, ciudad, y teléfono de todos los miembros del videoclub que hayan alquilado películas que hayan sido nominadas a más de 150 premios y ganaran menos de 50
	
	SELECT
		DISTINCT M.MEMBER_NAME,
		M.MEMBER_ADDRESS,
		M.MEMBER_PHONE 
	FROM
		PUBLIC.AWARDS A
	JOIN PUBLIC.MEMBERS_MOVIE_RENTAL MMR ON
		A.MOVIE_ID = MMR.MOVIE_ID
	JOIN MEMBERS M ON
		M.MEMBER_ID = MMR.MEMBER_ID
	WHERE
		A.AWARD_NOMINATION > 150 AND A.AWARD_WIN <50
	
	--------------------------------------------------------------------------------------
 33. Comprueba si hay errores en la BD entre las películas y directores (un director fallecido en el 76 no puede dirigir una película en el 88)
	
	SELECT
		D.DIRECTOR_NAME,
		D.DIRECTOR_DEAD_DATE,
		MAX(MOV.MOVIE_LAUNCH_DATE) AS LAST_MOVIE
	FROM
		DIRECTORS D
	JOIN MOVIES MOV ON
		MOV.DIRECTOR_ID = D.DIRECTOR_ID
	WHERE
		D.DIRECTOR_DEAD_DATE <= MOV.MOVIE_LAUNCH_DATE
	GROUP BY
		D.DIRECTOR_NAME,
		D.DIRECTOR_DEAD_DATE;
	
	--------------------------------------------------------------------------------------
 34. Utilizando la información de la sentencia anterior, modifica la fecha de defunción a un año más tarde del estreno de la película (mediante sentencia SQL)
	
	UPDATE
		DIRECTORS
	SET
		DIRECTOR_DEAD_DATE =(
		SELECT
			MAX(DATEADD(YEAR, 1, M.MOVIE_LAUNCH_DATE)) AS POST_MOVIE_LAUNCH_DATE
		FROM
			MOVIES M
		INNER JOIN DIRECTORS D ON
			M.DIRECTOR_ID = D.DIRECTOR_ID
		WHERE
			D.DIRECTOR_DEAD_DATE IS NOT NULL
			AND D.DIRECTOR_DEAD_DATE < M.MOVIE_LAUNCH_DATE
			AND D.DIRECTOR_ID = DIRECTORS.DIRECTOR_ID
		GROUP BY
			DIRECTOR_NAME,
			DIRECTOR_DEAD_DATE)
	WHERE
		DIRECTOR_ID IN (
		SELECT
			DISTINCT D.DIRECTOR_ID
		FROM
			MOVIES M
		INNER JOIN DIRECTORS D ON
			M.DIRECTOR_ID = D.DIRECTOR_ID
		WHERE
			D.DIRECTOR_DEAD_DATE IS NOT NULL
			AND D.DIRECTOR_DEAD_DATE < M.MOVIE_LAUNCH_DATE )
	--------------------------------------------------------------------------------------
	MERGE
	INTO
		PUBLIC.DIRECTORS D
			USING (
		SELECT
			DIRECTOR_ID,
			DATEADD(YEAR,
			1,
			MAX(M.MOVIE_LAUNCH_DATE)) AS DIRECTOR_DEAD_DATE
		FROM
			PUBLIC.DIRECTORS D
		INNER JOIN PUBLIC.MOVIES M ON
			D.DIRECTOR_ID = M.DIRECTOR_ID
		WHERE
			D.DIRECTOR_DEAD_DATE IS NOT NULL
			AND M.MOVIE_LAUNCH_DATE > D.DIRECTOR_DEAD_DATE
		GROUP BY
			D.DIRECTOR_ID 
			
			) TOT (DIRECTOR_ID,
		DIRECTOR_DEAD_DATE) ON
		D.DIRECTOR_ID = TOT.DIRECTOR_ID
		WHEN MATCHED THEN
		UPDATE
	SET
		D.DIRECTOR_DEAD_DATE = TOT.DIRECTOR_DEAD_DATE
	
DIFICULTAD: Berserk mode (enunciados simples, mucha diversión...)

	--------------------------------------------------------------------------------------
 35. Indica cuál es el género favorito de cada uno de los directores cuando dirigen una película

	SELECT
		GROUPID.DIRECTOR_NAME,
		GROUP_CONCAT(GROUPID.GENRE_NAME) AS GENRE_NAME
	FROM
		(
		SELECT
			COUNT(G.GENRE_NAME) AS NUM_MOVIES,
			D.DIRECTOR_ID,
			D.DIRECTOR_NAME,
			G.GENRE_ID,
			G.GENRE_NAME
		FROM
			MOVIES M
		INNER JOIN GENRES AS G ON
			M.GENRE_ID = G.GENRE_ID
		INNER JOIN DIRECTORS D ON
			M.DIRECTOR_ID = D.DIRECTOR_ID
		GROUP BY
			G.GENRE_ID,
			D.DIRECTOR_ID
		ORDER BY
			D.DIRECTOR_ID) GROUPID
	INNER JOIN (
		SELECT
			DIRECTOR_ID,
			MAX(NUM_MOVIES) NUM_MOVIES
		FROM
			(
			SELECT
				COUNT(G.GENRE_NAME) AS NUM_MOVIES,
				D.DIRECTOR_ID,
				D.DIRECTOR_NAME,
				G.GENRE_ID,
				G.GENRE_NAME
			FROM
				MOVIES M
			INNER JOIN GENRES AS G ON
				M.GENRE_ID = G.GENRE_ID
			INNER JOIN DIRECTORS D ON
				M.DIRECTOR_ID = D.DIRECTOR_ID
			GROUP BY
				G.GENRE_ID,
				D.DIRECTOR_ID
			ORDER BY
				D.DIRECTOR_ID)
		GROUP BY
			DIRECTOR_ID) MAXVAL ON
		GROUPID.DIRECTOR_ID = MAXVAL.DIRECTOR_ID
		AND GROUPID.NUM_MOVIES = MAXVAL.NUM_MOVIES
	GROUP BY
		GROUPID.DIRECTOR_NAME

	--------------------------------------------------------------------------------------
 36. Indica cuál es la nacionalidad favorita de cada uno de los estudios en la producción de las películas

	

	--------------------------------------------------------------------------------------
 37. Indica cuál fue la primera película que alquilaron los miembros del videoclub cuyos teléfonos 
 tengan como último dígito el ID de alguna nacionalidad

	SELECT
		MOVIERENTALS.MOVIE_NAME,
		MOVIERENTALS.MEMBER_NAME
	FROM
		(
		SELECT
			MO.MOVIE_NAME,
			MMR.MOVIE_ID,
			MMR.MEMBER_ID,
			MMR.MEMBER_RENTAL_DATE,
			M.MEMBER_NAME,
			TO_NUMBER(SUBSTRING(M.MEMBER_PHONE FROM LENGTH(MEMBER_PHONE))) AS "LAST_DIGIT"
		FROM
			MOVIES MO
		INNER JOIN
		MEMBERS_MOVIE_RENTAL MMR
		ON
			MO.MOVIE_ID = MMR.MOVIE_ID
		INNER JOIN MEMBERS M ON
			MMR.MEMBER_ID = M.MEMBER_ID
		WHERE
			TO_NUMBER(SUBSTRING(M.MEMBER_PHONE FROM LENGTH(MEMBER_PHONE))) IN (
			SELECT
				NATIONALITY_ID
			FROM
				NATIONALITIES
	)
		GROUP BY
			MO.MOVIE_NAME,
			MMR.MOVIE_ID,
			MMR.MEMBER_ID,
			MMR.MEMBER_RENTAL_DATE,
			M.MEMBER_NAME,
			LAST_DIGIT
		ORDER BY
			M.MEMBER_NAME
	) MOVIERENTALS
	INNER JOIN
		(
		SELECT
			MEMBER_ID,
			MIN(MEMBER_RENTAL_DATE) AS "FIRST_RENTAL"
		FROM
			(
			SELECT
				MO.MOVIE_NAME,
				MMR.MOVIE_ID,
				MMR.MEMBER_ID,
				MMR.MEMBER_RENTAL_DATE,
				M.MEMBER_NAME,
				TO_NUMBER(SUBSTRING(M.MEMBER_PHONE FROM LENGTH(MEMBER_PHONE))) AS "LAST_DIGIT"
			FROM
				MOVIES MO
			INNER JOIN
		MEMBERS_MOVIE_RENTAL MMR
		ON
				MO.MOVIE_ID = MMR.MOVIE_ID
			INNER JOIN MEMBERS M ON
				MMR.MEMBER_ID = M.MEMBER_ID
			WHERE
				TO_NUMBER(SUBSTRING(M.MEMBER_PHONE FROM LENGTH(MEMBER_PHONE))) IN (
				SELECT
					NATIONALITY_ID
				FROM
					NATIONALITIES
	)
			GROUP BY
				MO.MOVIE_NAME,
				MMR.MOVIE_ID,
				MMR.MEMBER_ID,
				MMR.MEMBER_RENTAL_DATE,
				M.MEMBER_NAME,
				LAST_DIGIT
			ORDER BY
				M.MEMBER_NAME
		)
		GROUP BY
			MEMBER_ID) FIRSTRENTALS ON
		MOVIERENTALS.MEMBER_ID = FIRSTRENTALS.MEMBER_ID
		AND MOVIERENTALS.MEMBER_RENTAL_DATE = FIRSTRENTALS.FIRST_RENTAL
	GROUP BY
		MOVIERENTALS.MOVIE_NAME,
		MOVIERENTALS.MEMBER_NAME